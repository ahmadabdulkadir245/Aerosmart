import Head from "next/head"
import Header from "../components/Header";
import Footer from "../components/Footer";
import { useSelector, useDispatch } from "react-redux";
import { addToCart, emptyCart, selectedcartItems } from "../slices/cartSlice";
import {TbCurrencyNaira} from "react-icons/tb"
import { useRouter } from "next/navigation";
import { addToOrder } from "../slices/orderSlice";
import DesktopCart from "../components/DesktopCart";
import ProductSlider from "../components/ProductSlider";
import { useEffect, useState } from "react";
import Loading from "../components/Loading";
import axios from "axios";
import { parse } from 'cookie';
import { removeFromCart } from "../utils/cartFuncitions";
import { getAuthTokenFromCookie, getUserIDFromCookie } from "../utils/cookie";
import { fetchCartItems, fetchProductById, selectCartItems, selectProducts, selectTotal } from "../slices/cartItemsSlice";





function Cart({products, cart, user_id, authToken}) {
  const router = useRouter()
  const dispatch = useDispatch()
  const cartItems = useSelector(selectCartItems);
  const cartItemsTest = useSelector(selectCartItems); 
  const productsTest = useSelector(selectProducts) || []
  const ids =cartItemsTest.map(product => { 
    return product.product_id
  })
  console.log(productsTest)
  useEffect(() => {
    if(!user_id) {
      return
    }
    setLoading(true)
    dispatch(fetchCartItems());
    dispatch(fetchProductById(ids, setLoading))
    // dispatch(fetchCartItemsAndProducts(user_id));
  }, [user_id, dispatch, fetchCartItems, fetchProductById]);
  // console.log(productsTest)
  const cartTotal = useSelector(selectTotal)
  const addProductToCart = () => {
    const Product = {
      id,
      title,
      price,
      description,
      image_url,
    };
    dispatch(addToCart(Product));
  };

  const getProductsInCart = (carts, products) => {
    const productIdsInCart = carts.map((cart) => cart.product_id);
    const productsInCart = productsTest.map((product) => {
      // Find the cart item that matches the current product_id
      const cartItem = carts.find((cart) => cart.product_id === product.id);
      // If cartItem is found, create a new object with product, quantity, and cart_id properties
      if (cartItem) {
        return {
          product: {
            ...product,
            cart_id: cartItem.id, // Add the cart id to the product object
          },
          qty: cartItem.quantity,
        };
      }
      // If cartItem is not found, create a new object with product, quantity 0, and no cart_id
      return {
        product: {
          ...product,
          cart_id: null, // No cart_id since the product is not in the cart
        },
        qty: 0,
      };
    });
    
    
    // Filter out products not in the cart
    const filteredProductsInCart = productsInCart.filter((product) => product.qty > 0);
  
    return filteredProductsInCart;
  };
  
  
  // Assuming you have the carts and products arrays
  const filteredProducts = getProductsInCart(cart, products);
  useEffect(() => {
    // Fetch filteredProducts containing both products and their quantities
    const filteredProducts = getProductsInCart(cart, products);
    // Dispatch addToCart action for each product with its corresponding quantity
    filteredProducts.forEach((productWithQty) => {
      dispatch(addToCart(productWithQty));
    });
  }, [cart, products, dispatch]);
  // console.log(filteredProducts)
  // console.log(filteredProducts)


const removeItemFromCart = async (cart_item_id) => {
  try {
    await removeFromCart(Number(user_id), cart_item_id);
    // Perform any additional actions after successful removal
    console.log('Item removed from cart successfully.');
  } catch (error) {
    console.error('Error removing item from cart:', error.message);
  }
};
  
  // console.log(cartItems)
  const checkoutHandler =  () => {
    if(authToken) {
      router.push('/checkout')
      dispatch(addToOrder(cartItemsTest))
    }else {
      router.push('/login')
    }
  }


  const [loading, setLoading] = useState(true)

  useEffect(() => {
    setTimeout(() => {
      setLoading(false)
    }, 400)
  }, [loading])
  
  if (loading) {
    return<>
    <Header/>
    <Loading />
    </> 
  }

const condition = cartItemsTest.length < 0 && filteredProducts.length < 0

  // if (cartItemsTest.length > 0) {
  //   return (
  //     <>
  //     <Header /> 
  //     <div className='iceland mt-4 m-auto w-[95%] lg:max-w-7xl text-[#181818]'>
  //      <Head>
  //       <title>Cart</title>
  //       <meta name="description" content="Generated by create next app" />
  //       <link rel="icon" href="/favicon.ico" />
  //       {/* fonts import */}
  //     </Head>
      
  //       <p className=' text-center text-3xl mt-10 h-[90vh]'>No porducts in cart</p>
  //     </div>
  //     </>
  //   );
  // }
  return (
    <div className=''>
      <Header />
      <div className='pt-5 lg:pt-10 lg:grid grid-cols-3 gap-x-6 m-auto  lg:max-w-7xl max-h-[calc(100vh-132px)] lg:h-full transition-all duration-500 ease-in overflow-y-scroll scrollbar-hide'>
        <div className="font-poppins px-3 text-lg uppercase text-gray-600 lg:hidden">
          cart page
        </div>
              <div className="col-span-2">

        <div className="hidden lg:flex items-center uppercase bg-gray-200 py-2 px-5 text-gray-800 text-sm font-poppins tracking-wider text-center">
        <div className="">
          <p><span className='hidden lg:inline-block font-semibold'>PRODUCTS</span> </p>
        </div>
      
    </div>
        {authToken ? 
        <>
        {filteredProducts.map(
          ({product, qty}) => (
            <DesktopCart
            key={product?.id}
            id={product?.id}
            title={product?.title}
            price={product?.price}
            description={product?.description}
            productQty={qty}
            image_url={product?.image_url}
            onRemove={() => removeItemFromCart(product?.cart_id)}
            user_id={user_id}
            authToken={authToken}
            />
            )
            )}
        </>  
        :
        <>
            {cartItemsTest.map(
          ({product, qty}) => (
            <DesktopCart
            key={product?.id}
            id={product?.id}
            title={product?.title}
            price={product?.price}
            description={product?.description}
            productQty={qty}
            image_url={product?.image_url}
            onRemove={() => removeItemFromCart(product?.cart_id)}
            user_id={user_id}
            />
            )
            )}
        </>  
      
      } 


      </div>
            <div className="">
            <div className="hidden lg:flex items-center uppercase bg-gray-200 py-2 px-5 text-gray-700 text-sm font-poppins tracking-wider text-center">
        <div className="text-sm">
          <p><span className='hidden lg:inline-block'>ORDER SUMMERY</span> </p>
        </div>

            </div>
            <div className="flex justify-between px-8 pt-6 lg:pt-6  ">
            <p > Products:</p>
            <p className="flex items-center font-changa">{cartItems.length}</p>
            </div>
            <div className="flex justify-between px-8 py-4  ">
            <p >Subtotal:</p>
            <p className="flex items-center"><TbCurrencyNaira  className="w-5 h-5"/><p className="font-changa">{cartTotal.toLocaleString()}</p></p>
            </div>
          <div className="hidden  px-8 shadow-xl w-full    pb-2 overflow-hiddentext-gray-500  lg:block">
      <button className="capitalize w-full h-[48px] rounded-md text-white  text-sm bg-yellow-500  mb-2 flex items-center justify-center m-auto hover:bg-yellow-400 transition-all delay-100 ease-in font-changa" 
      onClick={checkoutHandler}>Go To Checkout | <TbCurrencyNaira  className="w-5 h-5"/>{authToken ? cartTotal.toLocaleString() : 0}
      </button>
          </div>
          </div>
            </div>


      <div className=" px-3 shadow-xl w-full  text-lg  pt-4 pb-2 overflow-hiddentext-gray-500 lg:hidden ">
      <button className="capitalize w-[90%] h-[48px] rounded-md text-white  text-sm bg-yellow-500  mb-2 flex items-center justify-center m-auto font-changa" 
      onClick={checkoutHandler}>Go To Checkout | <TbCurrencyNaira  className="w-5 h-5"/>{authToken ? cartTotal.toLocaleString() : 0}
      </button>
          </div>

            {/* slider */}
            <div className="max-w-7xl mx-auto">
      <ProductSlider sectionTitle={'latest products'} products={products} path={'/'}/>

      <ProductSlider sectionTitle={'discount products'} products={products} path={'/'} discount={true}/>
        </div>

          <Footer/>
     </div>

  )
}

export default Cart


export const getServerSideProps = async (context) => {
  const page = 1;
  const perPage = 100;
  const user_id = getUserIDFromCookie(context.req);
  const authToken = getAuthTokenFromCookie(context.req);
  try {
    const response = await axios.post(process.env.NEXT_PUBLIC_GRAPHQL_URL, {
      query: `
        {
          products(page: ${page}, perPage: ${perPage}) {
            products {
              id
              title
              price
              image_url
              category
              quantity
              description
            }
          }

            cart(user_id: ${user_id}) {
              carts {
                id
                user_id
                quantity
                product_id
              }
            }
        }
      `,
    });

    const products = response.data?.data?.products?.products || [];
    const cart = response.data?.data?.cart?.carts || [] ;

    return {
      props: {
        products,
        cart,
        user_id, 
        authToken
      },
    };
  } catch (error) {
    console.error(error);
    return {
      props: {
        products: [],
        cart: [],
      },
    };
  }
};



